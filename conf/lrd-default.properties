################################################################################
# Copyright Â© 2013-2015 The Nxt Core Developers.                               #
#                                                                              #
# See the AUTHORS.txt, DEVELOPER-AGREEMENT.txt and LICENSE.txt files at        #
# the top-level directory of this distribution for the individual copyright    #
# holder information and the developer policies on copyright and licensing.    #
#                                                                              #
# Unless otherwise agreed in a custom licensing agreement, no part of the      #
# Nxt software, including this file, may be copied, modified, propagated,      #
# or distributed except according to the terms contained in the LICENSE.txt    #
# file.                                                                        #
#                                                                              #
# Removal or modification of this copyright notice is prohibited.              #
#                                                                              #
################################################################################

# Do not modify this file. Instead, create a lrd.properties file with only the
# properties you need to change, and set them there. The values in 
# lrd.properties override those in lrd-default.properties.



#### SYSTEM ####

# Set the socks proxy host
#socksProxyHost=localhost

# Set the socks proxy port
#socksProxyPort=9050



#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other
# peers. If disabled, peer networking servlet will not be started at all.
lrd.shareMyAddress=true

# Port for incoming peer to peer networking requests, if enabled.
lrd.peerServerPort=888

# Enable UPnP for the peer port
lrd.enablePeerUPnP=true

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all IPv4 interfaces or :: to listen on all IPv4 and
# IPv6 interfaces
lrd.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from lrd.peerServerPort (useful if you do port
# forwarding behind a router).
lrd.myAddress=

# My platform, to be announced to peers.
lrd.myPlatform=PC

# My hallmark, if available.
lrd.myHallmark=

# Default initial peers. Only used if lrd.usePeersDb=true.
# Do not modify. Add custom peers to lrd.wellKnownPeers instead.
lrd.defaultPeers=108.61.208.214;45.32.239.128;108.61.171.120;82.211.30.252;84.200.4.69;

# A list of well known peer addresses / host names, separated by '; '.
lrd.wellKnownPeers=

# Known bad peers to be blacklisted
lrd.knownBlacklistedPeers=

# Default initial peers used for testnet only. Only used if lrd.usePeersDb=true.
# Do not modify. Add custom testnet peers to lrd.testnetPeers instead.
lrd.defaultTestnetPeers=

# Peers used for testnet only.
lrd.testnetPeers=

# Maximum number of inbound connections
lrd.maxNumberOfInboundConnections=250

# Maximum number of outbound connections
lrd.maxNumberOfOutboundConnections=50

# Maintain active connections with at least that many peers.
lrd.maxNumberOfConnectedPublicPeers=20

# Stop adding new peers when number of known peers exceeds that many.
lrd.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
lrd.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
lrd.connectTimeout=10000

# Peer networking read timeout for outgoing connections.
lrd.readTimeout=20000

# Peer networking server idle timeout, milliseconds.
lrd.peerServerIdleTimeout=30000

# Use WebSocket connection if supported by the remote peer
lrd.useWebSockets=true

# WebSocket connection idle timeout (milliseconds)
lrd.webSocketIdleTimeout=900000

# Use the peer hallmark to only connect with peers above the defined push/pull
# hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark
# weight, so connecting to any of your peers becomes equally likely.
lrd.enableHallmarkProtection=true

# Hallmark threshold to use when sending data to peers.
lrd.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
lrd.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
lrd.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
lrd.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
lrd.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
lrd.enablePeerServerGZIPFilter=true

# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing
# only.
# When using testnet, all custom port settings will be ignored,
# and hardcoded ports of 77 (peer networking), 777 (UI) and 7777 (API) will
# be used.
lrd.isTestnet=false

# Save known peers in the database
lrd.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
lrd.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
lrd.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# lrd.shareMyAddress=false, lrd.wellKnownPeers=, lrd.testnetPeers= 
# and lrd.usePeersDb=false, and if set to true overrides those properties.
lrd.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
lrd.ignorePeerAnnouncedAddress=false

# Only allow peer addresses starting with "fc". This is for users of cjdns only,
# do not set if you don't know what that is.
lrd.cjdnsOnly=false



#### API SERVER ####

# Accept http/json API requests.
lrd.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
lrd.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for http/json API requests.
lrd.apiServerPort=8888

# Port for https/json API request. If same as lrd.apiServerPort, the lrd.apiSSL
# setting determines whether SSL is used or not.
lrd.apiServerSSLPort=8888

# Enable UPnP for the API ports
lrd.enableAPIUPnP=false

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces.
lrd.apiServerHost=127.0.0.1

# Idle timeout for http/json API request connections, milliseconds.
lrd.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
lrd.apiResourceBase=html

# Default page for the API server.
lrd.apiWelcomeFile=index.html

# Java API documentation directory, optional.
lrd.javadocResourceBase=doc

# Enable Cross Origin Filter for the API server.
lrd.apiServerCORS=false

# Enable SSL for the API server (also need to set lrd.keyStorePath and
# lrd.keyStorePassword).
# Non-SSL connections will be disabled if lrd.apiServerSSLPort is equal to
# lrd.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
lrd.apiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
lrd.apiServerEnforcePOST=true

# Compress Http responses for the API server.
lrd.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when 
# lrd.apiServerHost=127.0.0.1.
lrd.adminPassword=

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
lrd.disableAdminPassword=false

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
lrd.maxAPIRecords=100

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
lrd.apiEventTimeout=300

# Maximum number of applications with active event registrations.
lrd.apiMaxEventUsers=32

# Maximum file size accepted for upload, in bytes. Default and minimum value
# accepted is 43008 (42 kbytes).
#lrd.maxUploadFileSize=0


#### OLD LRS USER INTERFACE ####

# Enable the deprecated LRS user interface.
lrd.enableUIServer=false

# Hosts from which to allow LRS user interface requests, if enabled. Set to * to
# allow all.
lrd.allowedUserHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for LRS user interface server.
lrd.uiServerPort=88

# Host interface for LRS user interface server, default localhost only.
# Set to 0.0.0.0 to allow the UI to be accessed on all network interfaces.
lrd.uiServerHost=127.0.0.1

# Idle timeout for LRS user interface server, milliseconds.
lrd.uiServerIdleTimeout=30000

# Directory with html and javascript files for the LRS client user interface.
lrd.uiResourceBase=html/lrs

# Enable Cross Origin Filter for LRS user interface server.
lrd.uiServerCORS=false

# Enable SSL for the LRS user interface (also need to set lrd.keyStorePath and
# lrd.keyStorePassword).
lrd.uiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
lrd.uiServerEnforcePOST=true



#### DEBUGGING ####

# Log file, will be overwritten at every restart.
#lrd.log=lrd.log
# The log file is now specified in logging.properties.

# Enable debug log output.
#lrd.debug=false
# Debug logging is now specified in logging properties.

# Include caller traceback in log messages.
lrd.enableLogTraceback=false

# Enable logging of exception stack traces.
lrd.enableStackTraces=true

# Enable logging of Jetty messages.
#lrd.debugJetty=false
# Jetty logging is now specified in logging properties.

# Used for debugging peer to peer communications.
lrd.communicationLoggingMask=0

# Track balances of the following accounts and related events for debugging
# purposes.
lrd.debugTraceAccounts=

# File name for logging tracked account balances.
lrd.debugTraceLog=lrd-trace.csv

# Separator character for trace log.
lrd.debugTraceSeparator=\t

# Quote character for trace log.
lrd.debugTraceQuote="

# Log changes to unconfirmed balances.
lrd.debugLogUnconfirmed=false



#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# The lrd_db folder is expected to be in the current working directory, will be
# created if missing.
# lrd.dbUrl=jdbc:h2:lrd_db/lrd;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE

# Database connection JDBC url to use with the test network, if isTestnet=true.
# lrd.testDbUrl=jdbc:h2:lrd_test_db/lrd;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE

lrd.dbType=h2
lrd.testDbType=h2

lrd.dbDir=lrd_db/lrd
lrd.testDbDir=lrd_test_db/lrd

lrd.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE
lrd.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE

lrd.dbUsername=sa
lrd.testDbUsername=sa

lrd.dbPassword=sa
lrd.testDbPassword=sa

# Database connection timeout in seconds.
lrd.dbLoginTimeout=70

# Database default lock timeout in seconds.
lrd.dbDefaultLockTimeout=60

# Maximum simultaneous database connections.
lrd.maxDbConnections=30

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
lrd.dbCacheKB=0

# Enable trimming of derived objects tables. Disabling this will significantly
# worsen performance.
lrd.trimDerivedTables=true

# If trimming is enabled, maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
lrd.maxRollback=800

# When trimming is enabled, it is run every lrd.trimFrequency blocks.
lrd.trimFrequency=1000

# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet.
lrd.maxPrunableLifetime=0

# Always include prunable parts in transaction json, as long as still available,
# even if expired.
lrd.includeExpiredPrunable=false

# Threshold for logging database statements (milliseconds)
lrd.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds)
lrd.transactionLogThreshold=15000

# Log the average transaction time after this many minutes
lrd.transactionLogInterval=15


#### Blocks and transactions ####

# Delay generation of next block in order to accumulate more transactions in it.
# Waiting for much more than 15 s is not useful as transactions are allowed at
# most 15 s timestamp difference from the block they can be included in.
lrd.forgingDelay=20

# Generate and submit the next block before its hit time in response to
# receiving a lower difficulty block. Submitting the block more than 15 s before
# its time however will lead to its rejection.
lrd.forgingSpeedup=3

# Verify batches of blocks downloaded from a single peer with that many other
# peers.
lrd.numberOfForkConfirmations=1
lrd.testnetNumberOfForkConfirmations=0

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
lrd.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
lrd.maxUnconfirmedTransactions=2000



#### VOTING SYSTEM ####

# If disabled, polls are not processed at finish height and results are not
# stored in the database. When requested, poll results will be calculated
# on-the-fly, if the votes are still available.
lrd.processPolls=true



#### MINT ####

# Address of the LRD server to which the mint worker submits its transactions
# (default: localhost).
lrd.mint.serverAddress=

# Use Https when connecting to the server. Note that mint worker accepts any SSL
# certificate as valid, without checking hostname or certificate authority,
# therefore this will not protect you against a man-in-the-middle attack when
# submitting mint transactions.
lrd.mint.useHttps=false

# Specify a mintable currency code.
lrd.mint.currencyCode=

# Secret phrase for the minting account, this secret phrase is sent to the host
# specified by lrd.mint.serverAddress therefore do not specify secret phrase of
# an account with lots of funds.
lrd.mint.secretPhrase=

# Number of units to mint per transaction
# The minting difficulty grows linearly with the number of units per mint.
lrd.mint.unitsPerMint=1

# The initial nonce used for minting
# Set to 0 to start with a random nonce.
lrd.mint.initialNonce=0

# Number of concurrency threads used for minting
# Set to 0 allocate one thread per processor core.
lrd.mint.threadPoolSize=0

# When set to false mint transactions are not submitted when a hash is solved.
# Set this value to true to perform actual minting.
lrd.mint.isSubmitted=false

# When set to false the mint worker will resume operation even in case a mint
# transaction has returned an error response
lrd.mint.stopOnError=false



#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking
# server only.
lrd.peerServerDoSFilter.maxRequestsPerSec=30
lrd.peerServerDoSFilter.delayMs=1000
lrd.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
lrd.keyStorePath=keystore
lrd.keyStorePassword=password



#### Developers only ####

# Force re-validation of blocks and transaction at start.
lrd.forceValidate=false

# Force re-build of derived objects tables at start.
lrd.forceScan=false

# Scale epoch time for faster forging. Only works when offline.
# lrd.timeMultiplier=1

# LRS version
lrd.version=1.5.15

